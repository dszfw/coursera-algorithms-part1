============================= Task 1 =============================
Question 1
Queue with two stacks. Implement a queue with two stacks so that each queue operations takes a constant amortized number of stack operations.

Queue
    inputStack
    outputStack

enqueue(element) {
    inputStack.push(element)
}

dequeue() {
    if (outputStack.isEmpty()) {
        while(!inputStack.isEmpty()) {
            el = inputStack.pop()
            outputStack.push(el)
        }
    }
    return outputStack.pop()
}


dequeue method provides constant amortized number of stack operations and O(N) in worst case.


============================= Task 2 =============================
Question 2
Stack with max. Create a data structure that efficiently supports the stack operations (push and pop) and also a return-the-maximum operation. Assume the elements are real numbers so that you can compare them.

StackWithMax
    double max = null
    push(el) {
        if (max == null || el > max) max = el
        ...
    }
    pop() {
        ...
        if (el == max) max = null 
        return el
    }
    getMax() {
        if (max != null) return max
        return calculateMax() // ~(N)
    }

O(N) worst case, 1(N) average


============================= Task 3 =============================
Question 3
Java generics. Explain why Java prohibits generic array creation.